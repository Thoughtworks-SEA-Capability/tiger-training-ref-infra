# this file contains the configuration for the actual pipelines for each of the stacks itself.

version: 2.1

default-context: &default-context
  context:
    - iat-aws

parameters:
  team:
    type: string
    default: 'tiger'
  pipeline-config:
    type: boolean
    default: false
  networking:
    type: boolean
    default: false
  eks:
    type: boolean
    default: false
  app-a:
    type: boolean
    default: false

# these are re-usable jobs that are re-used with relevant parameters for each of the stacks.
jobs:
  plan:
    working_directory: /tmp/project
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    parameters:
      environment:
        type: string
      stack:
        type: string
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            cd week2/stacks/<< parameters.stack >>
            terraform init -input=false -backend-config="key=<< pipeline.parameters.team >>/<< parameters.environment >>/<< parameters.stack >>"
            terraform plan \
            -var 'team_name=<< pipeline.parameters.team >>' \
            -var-file=../../environments/<< parameters.stack >>/<< parameters.environment >>.tfvars \
            -out tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .

  apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    parameters:
      stack:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            cd week2/stacks/<< parameters.stack >>
            terraform apply -auto-approve tfapply

# workflows are pipelines that are conditionally triggered depending of the on the pipeline.parameters
# pipeline.parameters are passed down from the config.yml depending on the path of the code change
# workflows invoke re-usable jobs with relevant parameters
workflows:
  version: 2
  networking:
    when:
      condition:
        or:
          - << pipeline.parameters.pipeline-config >>
          - << pipeline.parameters.networking >>
    jobs:
      - plan:
          name: networking-plan-stg
          <<: *default-context
          environment: 'stg'
          stack: 'networking'
      - apply:
          name: networking-apply-stg
          <<: *default-context
          stack: 'networking'
          requires:
            - networking-approve-stg
      - plan:
          name: networking-plan-prod
          <<: *default-context
          environment: 'prod'
          stack: 'networking'
          requires:
            - networking-apply-stg
      - networking-approve-prod:
          type: approval
          requires:
            - networking-plan-prod
      - apply:
          name: apply-prod
          <<: *default-context
          stack: 'networking'
          requires:
            - networking-approve-prod
  eks:
    when:
      condition:
        or:
          - << pipeline.parameters.pipeline-config >>
          - << pipeline.parameters.eks >>
    jobs:
      - plan:
          name: eks-plan-stg
          <<: *default-context
          environment: 'stg'
          stack: 'eks'
      - apply:
          name: eks-apply-stg
          <<: *default-context
          stack: 'eks'
          requires:
            - eks-plan-stg
      - plan:
          name: eks-plan-prod
          <<: *default-context
          environment: 'prod'
          stack: 'eks'
          requires:
            - eks-apply-stg
      - eks-approve-prod:
          type: approval
          requires:
            - eks-plan-prod
      - apply:
          name: eks-apply-prod
          <<: *default-context
          stack: 'eks'
          requires:
            - eks-plan-prod
  app-a:
    when:
      condition:
        or:
          - << pipeline.parameters.pipeline-config >>
          - << pipeline.parameters.app-a >>
    jobs:
      - plan:
          name: app-a-plan-stg
          <<: *default-context
          environment: 'stg'
          stack: 'app-a'
      - apply:
          name: app-a-apply-stg
          <<: *default-context
          stack: 'app-a'
          requires:
            - app-a-plan-stg
      - plan:
          name: app-a-plan-prod
          <<: *default-context
          environment: 'prod'
          stack: 'app-a'
          requires:
            - app-a-apply-stg
      - app-a-approve-prod:
          type: approval
          requires:
            - app-a-plan-prod
      - apply:
          name: app-a-apply-prod
          <<: *default-context
          stack: 'app-a'
          requires:
            - app-a-plan-prod
